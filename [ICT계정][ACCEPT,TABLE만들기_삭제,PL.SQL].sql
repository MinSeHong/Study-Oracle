SHOW USER

CREATE TABLE NOPKTBL(
    ID VARCHAR2(8),
    NAME NVARCHAR2(10)
);

INSERT INTO NOPKTBL VALUES ('KIM','김길동');
INSERT INTO NOPKTBL VALUES ('KIM','이길동');
INSERT INTO NOPKTBL (NAME) VALUES('박길동');
SELECT * FROM NOPKTBL;

DROP TABLE PKTBL;

CREATE TABLE PKTBL(
    ID VARCHAR2(8) CONSTRAINT PK_PKTBL PRIMARY KEY,
    NAME NVARCHAR2(10)
);

SELECT * FROM PKTBL;

INSERT INTO PKTBL VALUES ('KIM','김길동');
INSERT INTO PKTBL VALUES ('KIM','이길동');
INSERT INTO PKTBL (NAME) VALUES('박길동');



CREATE TABLE MULTIPKTBL(
    COL1 NUMBER,
    COL2 VARCHAR2(10),
    COL3 DATE,
    PRIMARY KEY(COL1,COL2)
);

SELECT * FROM MULTIPKTBL;

INSERT INTO MULTIPKTBL VALUES (1,'A',SYSDATE);
INSERT INTO MULTIPKTBL VALUES (1,'B',SYSDATE);
INSERT INTO MULTIPKTBL VALUES (2,'B',SYSDATE);
INSERT INTO MULTIPKTBL (COL1,COL2) VALUES(3,'A');

CREATE TABLE MEMBER(
    ID VARCHAR2(10) PRIMARY KEY,
    PWD VARCHAR2(10) NOT NULL,
    NAME NVARCHAR2(10)
);

CREATE TABLE NOFKBBS(
    NO NUMBER PRIMARY KEY,
    ID VARCHAR2(10),
    TITLE NVARCHAR2(10) NOT NULL
);

SELECT * FROM MEMBER;
INSERT INTO MEMBER VALUES ('PARK','1234','박길동');
INSERT INTO MEMBER VALUES ('KIM','1234','박길동');
DELETE MEMBER WHERE ID='KIM';

SELECT * FROM NOFKBBS;
INSERT INTO NOFKBBS VALUES (1,'KIM','TITLE1');

DELETE MEMBER WHERE ID='KIM';
SELECT N.*,NAME FROM NOFKBBS N JOIN MEMBER M ON M.ID=N.ID;

CREATE TABLE BBS(
    NO NUMBER PRIMARY KEY,
    ID VARCHAR2(10) CONSTRAINT FK_ID_BBS REFERENCES MEMBER(ID),
    TITLE NVARCHAR2(10) NOT NULL
);
SELECT * FROM MEMBER;
SELECT * FROM BBS;
INSERT INTO BBS VALUES (1,'PARK','TITLE2');

UPDATE BBS SET ID='CHOI' WHERE NO=1;

CREATE TABLE BBS1(
    NO NUMBER PRIMARY KEY,
    ID VARCHAR2(10) REFERENCES MEMBER(ID) ON DELETE CASCADE,
    TITLE NVARCHAR2(10) NOT NULL
);
INSERT INTO BBS1 VALUES (1,'PARK','TITLE2');
DELETE FROM BBS;

DELETE MEMBER WHERE ID='PARK';

CREATE TABLE BBS2(
    NO NUMBER PRIMARY KEY,
    ID VARCHAR2(10) REFERENCES MEMBER(ID) ON DELETE SET NULL,
    TITLE NVARCHAR2(10) NOT NULL
);
INSERT INTO BBS2 VALUES (1,'KIM','TITLE2');
DELETE MEMBER WHERE ID='KIM';


CREATE TABLE NNTBL(
    COL1 NUMBER PRIMARY KEY,
    COL2 CHAR(10) CONSTRAINT NN_COL2_NNTBL NOT NULL,
    COL3 VARCHAR2(10) NOT NULL,
    COL4 DATE
);

DESC NNTBL
INSERT INTO NNTBL VALUES (1,'COL2','COL3',SYSDATE);
INSERT INTO NNTBL(COL1,COL2,COL3) VALUES (2,'COL2-1','COL3-1');

SELECT * FROM NNTBL;



DESC UQTBL;

CREATE TABLE UQTBL(
    COL1 NUMBER PRIMARY KEY,
    COL2 CHAR(10) CONSTRAINT UQ_COL2_NNTBL UNIQUE,
    COL3 VARCHAR2(10) NOT NULL UNIQUE,
    COL4 DATE
);

SELECT * FROM UQTBL;
INSERT INTO UQTBL VALUES (1,'COL2','COL3',SYSDATE);
INSERT INTO UQTBL(COL1,COL3) VALUES(2,'COL3-1');
INSERT INTO UQTBL(COL1,COL3) VALUES(3,'COL3-2');

CREATE TABLE DFTBL(
    COL1 NUMBER PRIMARY KEY,
    COL2 CHAR(1) DEFAULT 'Y',
    COL3 NUMBER DEFAULT 1004,
    COL4 DATE DEFAULT SYSDATE
);

DESC DFTBL

INSERT INTO DFTBL(COL1) VALUES(1);
INSERT INTO DFTBL VALUES(2,'N',2023,DEFAULT);
SELECT * FROM DFTBL;

SELECT * FROM MEMBER;


SELECT ENAME,SAL,DEPTNO,DNAME,HIREDATE
FROM (SELECT E.*,DNAME,RANK() OVER(ORDER BY SAL DESC) AS SAL_RANK FROM EMP E JOIN DEPT D ON E.DEPTNO=D.DEPTNO)	
WHERE SAL_RANK BETWEEN 6 AND 10;




CREATE TABLE BOARD(
    NO NUMBER PRIMARY KEY,
    TITLE NVARCHAR2(50) NOT NULL,
    CONTENT NVARCHAR2(100) NOT NULL,
    WRITER NVARCHAR2(10) NOT NULL,
    POSTDATE DATE DEFAULT SYSDATE
);

DESC BOARD

CREATE SEQUENCE MYSEQ1
INCREMENT BY 2
START WITH 10
MAXVALUE 20
CYCLE
NOCACHE;

DROP SEQUENCE MYSEQ1;

SELECT MYSEQ1.NEXTVAL FROM DUAL;

DESC BOARD

CREATE SEQUENCE SEQ_BOARD
NOCACHE
NOCYCLE;

SELECT * FROM BOARD;

INSERT INTO BOARD VALUES(
SEQ_BOARD.NEXTVAR,
'제목'||SEQ_BOARD.NEXTVAR,
'내용'||SEQ_BOARD.CURRVAR,
'작성자'||SEQ_BOARD.NEXTVAR,
DEFAULT);

DROP SEQUENCE MYSEQ1]




/*===================================================================*/
--SQL%FOUND , SQL%NOTFOUND
/*===================================================================*/

SET SERVEROUT ON
SELECT * FROM BOARD;
DESC BOARD
ACCEPT WRITER PROMPT '작성자 입력?'
ACCEPT TITLE PROMPT '제목 입력?'
/*===================================================================*/
--DECLARE에 있는 에러는 잡을 수가 없다.
/*===================================================================*/
BEGIN
    INSERT INTO BOARD VALUES(SEQ_BOARD.NEXTVAL,'&TITLE','내용','&WRITER',SYSDATE);
    IF SQL%FOUND THEN
        DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT || ' 행이 입력되었어요'); 
        --저장된 곳은 SQL%ROWCOUNT이다.
    END IF;
    /*===================================================================*/
    --EXCEPTION 예외 처리문
    /*===================================================================*/
    EXCEPTION
    WHEN OTHERS THEN
    BEGIN
        DBMS_OUTPUT.PUT_LINE('오류발생');
    END;
END;
/



/*=====================================================================================*/
ACCEPT WRITER PROMPT '작성자 입력?'
ACCEPT TITLE PROMPT '제목 입력?'
BEGIN
    DELETE BOARD WHERE NO >=157 AND NO <= 159;
    IF SQL%FOUND THEN
        DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT || ' 행이 입력되었어요'); 
    END IF;
    EXCEPTION
    WHEN OTHERS THEN
    BEGIN
        DBMS_OUTPUT.PUT_LINE('오류발생');
    END;
END;
/



SELECT * FROM BOARD;









DROP TABLE MEMBER1 CASCADE CONSTRAINT;

CREATE TABLE MEMBER(
    USERNAME VARCHAR2(10) PRIMARY KEY,
    PASSWORD VARCHAR2(10) NOT NULL,
    NAME NVARCHAR2(10) NOT NULL,
    REGIDATE DATE DEFAULT SYSDATE
);

SELECT * FROM MEMBER;
-- PL/SQL문안에서 SELECT문을 쓸때는
-- 반드시 INTO절과 함께 그리고
-- 반드시 레코드 하나만 검색되는 SELECT문만 가능


insert into member values('kim','1234','김길동',DEFAULT);
insert into member values('LEE','1234','이길동',DEFAULT);
insert into member values('PARK','1234','박길동',DEFAULT);

select * from member;
-- PL/SQL문안에서 SELECT문을 쓸때는
-- 반드시 INTO절과 함께 그리고
-- 반드시 레코드 하나만 검색되는 SELECT문만 가능

ACCEPT USERNAME PROMPT '아이디 입력?';
DECLARE
    USERNAME_ MEMBER.USERNAME%TYPE := '&USERNAME';
    NAME_ MEMBER.NAME%TYPE;
    VAL NUMBER; --OTHERS 테스트용
BEGIN
    --여러개 레코드가 있는 경우 100% 에러
    --아래 쿼리문은 모든 행을 조회하는 쿼리문
    --select username,name into username,  name from member;
    SELECT USERNAME, NAME INTO USERNAME_, NAME_ FROM MEMBER WHERE USERNAME=USERANME_;
    DBMS_OUTPUT.PUT_LINE('아이디:' || USERNAME_ || ',이름:', || NAME_);
    --OTHER 테스트용
    VAL:=100/0;
    EXCEPTION
        WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE('여러개의 레코드가 검색 되었어요');
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('여러개의 레코드가 검색 되었어요');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('에러 메세지:'||SQLERRM);
            DBMS_OUTPUT.PUT_LINE('에러 메세지:'||SQLCODE);
END;
/
